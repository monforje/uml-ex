### Класс Юзер (абстрактный):

**Атрибуты:**

- `id: String` — уникальный идентификатор пользователя.
- `name: String` — имя пользователя.
- `email: String` — электронная почта пользователя.
- `phone: String` — номер телефона пользователя.

**Методы:**

- `login()` — авторизация пользователя.
- `logout()` — выход из системы.
- `updateProfile()` — обновление профиля пользователя.

---

### Класс Клиент (наследник Юзер):

**Атрибуты:**

- `address: String` — адрес доставки.
- `cart: List<Продукт>` — текущие товары в корзине, связано с `Продукт`.
- `orderHistory: List<Заказ>` — история заказов клиента, связано с `Заказ`.

**Методы:**

- `selectProducts()` — выбор продуктов в приложении.
- `placeOrder(): Заказ` — оформление заказа, возвращает объект `Заказ`.
- `makePayment()` — оплата заказа, связано с `Способ Оплаты`.
- `trackOrder(orderID: String)` — отслеживание статуса заказа, связано с `Заказ`.
- `updateAddress()` — обновление адреса доставки.
- `viewOrderHistory()` — просмотр истории заказов.

---

### Класс Сборщик (наследник Юзер):

**Атрибуты:**

- `currentOrders: List<Заказ>` — текущие заказы на сборку, связано с `Заказ`.

**Методы:**

- `assignPackage(order: Заказ)` — назначение упаковки для заказа.
- `collectOrder(order: Заказ)` — сбор заказа в дарксторе.
- `confirmOrderReady(order: Заказ)` — подтверждение готовности заказа.
- `reportIssue(order: Заказ, issue: String)` — сообщение о проблемах со сборкой.

---

### Класс Курьер (наследник Юзер):

**Атрибуты:**

- `vehicleType: String` — тип транспортного средства.
- `currentLocation: String` — текущее местоположение курьера.
- `currentOrder: Заказ` — текущий заказ на доставку, связано с `Заказ`.

**Методы:**

- `startDelivery(order: Заказ)` — начало доставки заказа.
- `completeDelivery(order: Заказ)` — завершение доставки.
- `updateLocation(location: String)` — обновление местоположения курьера.
- `cancelDelivery(order: Заказ)` — отмена доставки.

---

### Класс Способ Оплаты (абстрактный):

**Атрибуты:**

- `paymentMethod: String` — тип оплаты (например, карта, СБП).

**Методы:**

- `validatePayment(): Boolean` — валидация оплаты.

---

### Класс Оплата картой (наследник Способ Оплаты):

**Атрибуты:**

- `cardNum: String` — номер карты.
- `cardDate: String` — дата окончания срока действия карты.
- `cardCVV: String` — CVV код карты.
- `cardHolderName: String` — имя владельца карты.

**Методы:**

- `validatePayment(): Boolean` — проверка корректности данных карты.

---

### Класс СБП оплата (наследник Способ Оплаты):

**Атрибуты:**

- `phone: String` — номер телефона клиента.
- `bankName: String` — название банка.
- `transactionID: String` — идентификатор транзакции.

**Методы:**

- `validatePayment(): Boolean` — проверка платежа через СБП.

---

### Класс Заказ:

**Атрибуты:**

- `orderID: String` — уникальный идентификатор заказа.
- `productList: List<Продукт>` — список продуктов в заказе, связано с `Продукт`.
- `paymentMethod: Способ Оплаты` — выбранный способ оплаты, связано с `Способ Оплаты`.
- `status: OrderStatus` — статус заказа (например, “Собирается”, “Доставляется”), представлено через перечисление.
- `createdAt: Date` — дата создания заказа.
- `updatedAt: Date` — дата последнего обновления заказа.
- `deliveryTime: Date` — предполагаемое время доставки.

**Методы:**

- `calculatePrice(): Double` — расчет стоимости заказа.
- `updateStatus(status: OrderStatus)` — обновление статуса заказа.
- `cancelOrder()` — отмена заказа.

---

### Класс Продукт:

**Атрибуты:**

- `productID: String` — уникальный идентификатор продукта.
- `name: String` — название продукта.
- `price: Double` — цена продукта.
- `description: String` — описание продукта.
- `stock: Int` — количество товара на складе.

---

### Класс Приложение:

**Методы:**

- `browseProducts(): List<Продукт>` — просмотр ассортимента товаров, связано с `Продукт`.
- `manageCart(cart: List<Продукт>)` — управление корзиной, связано с `Продукт`.
- `trackOrder(orderID: String)` — отслеживание статуса заказа, связано с `Заказ`.
- `register(user: Юзер)` — регистрация новых пользователей, связано с `Юзер`.
- `authenticateUser(email: String, password: String): Юзер` — авторизация пользователей, связано с `Юзер`.

---

### Класс Даркстор Система:

**Атрибуты:**

- `inventory: Map<Продукт, Int>` — запасы товаров на складе, связано с `Продукт`.
- `staffList: List<Сборщик | Курьер>` — список сотрудников, связано с `Сборщик` и `Курьер`.
- `activeOrders: List<Заказ>` — активные заказы, связано с `Заказ`.

**Методы:**

- `assignOrderToAssembler(order: Заказ, assembler: Сборщик)` — назначение сборщика для заказа.
- `notifyCourier(order: Заказ, courier: Курьер)` — уведомление курьера о готовности заказа.
- `manageInventory()` — управление запасами на складе.
- `trackOrderProgress(order: Заказ): OrderStatus` — отслеживание прогресса выполнения заказа.
- `generateInventoryReport(): String` — создание отчетов о запасах.
- `handleReturns(order: Заказ)` — обработка возвратов товаров от курьеров.

---

### Класс Администратор (наследник Юзер):

**Атрибуты:**

- `permissions: List<String>` — список прав доступа администратора.

**Методы:**

- `manageUsers(user: Юзер)` — управление аккаунтами пользователей, связано с `Юзер`.
- `generateReports(): String` — создание отчетов о заказах, продажах и других аспектах системы.

---

### Связи между классами:

1. `Клиент` взаимодействует с `Продукт` через `cart` и `orderHistory`.
2. `Заказ` включает ссылки на `Продукт` и `Способ Оплаты`.
3. `Даркстор Система` управляет `Продукт`, `Сборщик`, `Курьер` и их взаимодействием с `Заказ`.
4. `Приложение` является фасадом для всех операций, связанных с клиентами, заказами и оплатой.

